"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Calendar, Download, Trash2, Search, Filter, X, SortAsc } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface AnalysisRecord {
  id: string
  date: Date
  imageName: string
  prediction: string
  treatment: string
  confidence: number
  severity: string
}

interface AnalysisHistoryProps {
  isOpen: boolean
  onClose: () => void
}

export const AnalysisHistory: React.FC<AnalysisHistoryProps> = ({ isOpen, onClose }) => {
  const [analysisHistory, setAnalysisHistory] = useState<AnalysisRecord[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterSeverity, setFilterSeverity] = useState("all")
  const [sortBy, setSortBy] = useState("date")
  const [showFilters, setShowFilters] = useState(false)

  // Load analysis history from localStorage
  useEffect(() => {
    const savedHistory = localStorage.getItem("agriscan-analysis-history")
    if (savedHistory) {
      try {
        const parsed = JSON.parse(savedHistory).map((record: any) => ({
          ...record,
          date: new Date(record.date),
        }))
        setAnalysisHistory(parsed)
      } catch (error) {
        console.error("Error loading analysis history:", error)
      }
    }
  }, [isOpen])

  // Save analysis history to localStorage
  const saveHistory = (history: AnalysisRecord[]) => {
    localStorage.setItem("agriscan-analysis-history", JSON.stringify(history))
    setAnalysisHistory(history)
  }

  // Delete analysis record
  const deleteRecord = (id: string) => {
    const updatedHistory = analysisHistory.filter((record) => record.id !== id)
    saveHistory(updatedHistory)
  }

  // Clear all history
  const clearAllHistory = () => {
    saveHistory([])
  }

  // Filter and sort history
  const filteredHistory = analysisHistory
    .filter((record) => {
      const matchesSearch =
        record.prediction.toLowerCase().includes(searchTerm.toLowerCase()) ||
        record.imageName.toLowerCase().includes(searchTerm.toLowerCase())
      const matchesSeverity = filterSeverity === "all" || record.severity === filterSeverity
      return matchesSearch && matchesSeverity
    })
    .sort((a, b) => {
      switch (sortBy) {
        case "date":
          return b.date.getTime() - a.date.getTime()
        case "confidence":
          return b.confidence - a.confidence
        case "severity":
          return a.severity.localeCompare(b.severity)
        default:
          return 0
      }
    })

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "healthy":
        return "bg-green-100 text-green-800 border-green-200"
      case "mild":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "moderate":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "severe":
        return "bg-red-100 text-red-800 border-red-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const downloadRecord = (record: AnalysisRecord) => {
    const report = `
AgriScan AI - Analysis Report
============================

Date: ${record.date.toLocaleDateString()}
Time: ${record.date.toLocaleTimeString()}
Image: ${record.imageName}
Disease: ${record.prediction}
Confidence: ${record.confidence}%
Severity: ${record.severity}
Treatment: ${record.treatment}

Generated by AgriScan AI
    `.trim()

    const blob = new Blob([report], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `analysis-${record.id}-${record.date.toISOString().split("T")[0]}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95vw] max-w-4xl h-[90vh] max-h-[90vh] p-0 gap-0">
        {/* Mobile-optimized Header */}
        <DialogHeader className="p-4 sm:p-6 pb-0 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <DialogTitle className="text-lg sm:text-2xl font-bold flex items-center gap-2 sm:gap-3">
              <Calendar className="w-5 h-5 sm:w-6 sm:h-6 text-green-600" />
              <span className="hidden sm:inline">Analysis History</span>
              <span className="sm:hidden">History</span>
            </DialogTitle>
            <Button variant="ghost" size="sm" onClick={onClose} className="md:hidden p-2 h-8 w-8">
              <X className="w-4 h-4" />
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          {/* Mobile-optimized Search and Filter Controls */}
          <div className="p-4 sm:p-6 space-y-3 sm:space-y-4 border-b border-gray-200">
            {/* Search Bar */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <Input
                placeholder="Search diseases or images..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 h-10 sm:h-11 text-sm sm:text-base"
              />
            </div>

            {/* Mobile Filter Toggle */}
            <div className="flex items-center justify-between">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowFilters(!showFilters)}
                className="md:hidden flex items-center gap-2 h-9"
              >
                <Filter className="w-4 h-4" />
                Filters
                {(filterSeverity !== "all" || sortBy !== "date") && (
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                )}
              </Button>

              {/* Desktop Filters */}
              <div className="hidden md:flex gap-2">
                <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                  <SelectTrigger className="w-36">
                    <Filter className="w-4 h-4 mr-2" />
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Severity</SelectItem>
                    <SelectItem value="healthy">Healthy</SelectItem>
                    <SelectItem value="mild">Mild</SelectItem>
                    <SelectItem value="moderate">Moderate</SelectItem>
                    <SelectItem value="severe">Severe</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={sortBy} onValueChange={setSortBy}>
                  <SelectTrigger className="w-36">
                    <SortAsc className="w-4 h-4 mr-2" />
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="date">Sort by Date</SelectItem>
                    <SelectItem value="confidence">Sort by Confidence</SelectItem>
                    <SelectItem value="severity">Sort by Severity</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="text-xs sm:text-sm text-gray-600">
                {filteredHistory.length} of {analysisHistory.length}
              </div>
            </div>

            {/* Mobile Filters Dropdown */}
            {showFilters && (
              <div className="md:hidden space-y-3 p-3 bg-gray-50 rounded-lg border">
                <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                  <SelectTrigger>
                    <Filter className="w-4 h-4 mr-2" />
                    <SelectValue placeholder="Filter by severity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Severity</SelectItem>
                    <SelectItem value="healthy">Healthy</SelectItem>
                    <SelectItem value="mild">Mild</SelectItem>
                    <SelectItem value="moderate">Moderate</SelectItem>
                    <SelectItem value="severe">Severe</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={sortBy} onValueChange={setSortBy}>
                  <SelectTrigger>
                    <SortAsc className="w-4 h-4 mr-2" />
                    <SelectValue placeholder="Sort by" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="date">Sort by Date</SelectItem>
                    <SelectItem value="confidence">Sort by Confidence</SelectItem>
                    <SelectItem value="severity">Sort by Severity</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          {/* History List */}
          <div className="flex-1 overflow-hidden">
            <ScrollArea className="h-full">
              <div className="p-4 sm:p-6">
                {filteredHistory.length === 0 ? (
                  <div className="text-center py-8 sm:py-12">
                    <Calendar className="w-12 h-12 sm:w-16 sm:h-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-base sm:text-lg font-semibold text-gray-900 mb-2">No Analysis History</h3>
                    <p className="text-sm sm:text-base text-gray-600 px-4">
                      {searchTerm || filterSeverity !== "all"
                        ? "No records match your search criteria"
                        : "Start analyzing crop images to build your history"}
                    </p>
                  </div>
                ) : (
                  <div className="space-y-3 sm:space-y-4">
                    {filteredHistory.map((record) => (
                      <div
                        key={record.id}
                        className="bg-white rounded-lg border border-gray-200 p-3 sm:p-4 hover:shadow-md transition-shadow"
                      >
                        {/* Mobile-optimized record layout */}
                        <div className="space-y-3">
                          {/* Header Row */}
                          <div className="flex items-start justify-between gap-2">
                            <div className="flex-1 min-w-0">
                              <h4 className="font-semibold text-gray-900 text-sm sm:text-base mb-1 line-clamp-2">
                                {record.prediction}
                              </h4>
                              <div className="flex flex-wrap items-center gap-1 sm:gap-2">
                                <Badge className={`text-xs ${getSeverityColor(record.severity)}`}>
                                  {record.severity}
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  {record.confidence}%
                                </Badge>
                              </div>
                            </div>
                            <div className="flex gap-1 flex-shrink-0">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => downloadRecord(record)}
                                className="p-2 h-8 w-8"
                              >
                                <Download className="w-3 h-3" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => deleteRecord(record.id)}
                                className="p-2 h-8 w-8 text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="w-3 h-3" />
                              </Button>
                            </div>
                          </div>

                          {/* Details */}
                          <div className="space-y-2 text-xs sm:text-sm text-gray-600">
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-1 sm:gap-2">
                              <p className="truncate">
                                <strong>Image:</strong> {record.imageName}
                              </p>
                              <p>
                                <strong>Date:</strong> {record.date.toLocaleDateString()}
                              </p>
                            </div>
                            <p className="line-clamp-2">
                              <strong>Treatment:</strong> {record.treatment}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </ScrollArea>
          </div>

          {/* Mobile-optimized Footer Actions */}
          {analysisHistory.length > 0 && (
            <div className="border-t border-gray-200 p-4 sm:p-6">
              <div className="flex flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between sm:items-center">
                <p className="text-xs sm:text-sm text-gray-600 text-center sm:text-left">
                  Showing {filteredHistory.length} of {analysisHistory.length} records
                </p>
                <div className="flex gap-2 justify-center sm:justify-end">
                  <Button
                    variant="outline"
                    onClick={clearAllHistory}
                    className="text-red-600 hover:text-red-700 flex-1 sm:flex-none text-sm"
                    size="sm"
                  >
                    <Trash2 className="w-4 h-4 mr-2" />
                    <span className="hidden sm:inline">Clear All</span>
                    <span className="sm:hidden">Clear</span>
                  </Button>
                  <Button onClick={onClose} className="flex-1 sm:flex-none text-sm" size="sm">
                    Close
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
