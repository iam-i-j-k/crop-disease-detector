"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { Calendar, Download, Trash2, Search, Filter } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface AnalysisRecord {
  id: string
  date: Date
  imageName: string
  prediction: string
  treatment: string
  confidence: number
  severity: string
}

interface AnalysisHistoryProps {
  isOpen: boolean
  onClose: () => void
}

export const AnalysisHistory: React.FC<AnalysisHistoryProps> = ({ isOpen, onClose }) => {
  const [analysisHistory, setAnalysisHistory] = useState<AnalysisRecord[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [filterSeverity, setFilterSeverity] = useState("all")
  const [sortBy, setSortBy] = useState("date")

  // Load analysis history from localStorage
  useEffect(() => {
    const savedHistory = localStorage.getItem("agriscan-analysis-history")
    if (savedHistory) {
      try {
        const parsed = JSON.parse(savedHistory).map((record: any) => ({
          ...record,
          date: new Date(record.date),
        }))
        setAnalysisHistory(parsed)
      } catch (error) {
        console.error("Error loading analysis history:", error)
      }
    }
  }, [isOpen])

  // Save analysis history to localStorage
  const saveHistory = (history: AnalysisRecord[]) => {
    localStorage.setItem("agriscan-analysis-history", JSON.stringify(history))
    setAnalysisHistory(history)
  }

  // Add new analysis record
  const addAnalysisRecord = (prediction: string, treatment: string, imageName: string) => {
    const newRecord: AnalysisRecord = {
      id: Date.now().toString(),
      date: new Date(),
      imageName,
      prediction,
      treatment,
      confidence: Math.floor(Math.random() * 15) + 85, // 85-99%
      severity: prediction.toLowerCase().includes("healthy")
        ? "healthy"
        : prediction.toLowerCase().includes("mild")
          ? "mild"
          : prediction.toLowerCase().includes("severe")
            ? "severe"
            : "moderate",
    }

    const updatedHistory = [newRecord, ...analysisHistory].slice(0, 50) // Keep last 50 records
    saveHistory(updatedHistory)
  }

  // Delete analysis record
  const deleteRecord = (id: string) => {
    const updatedHistory = analysisHistory.filter((record) => record.id !== id)
    saveHistory(updatedHistory)
  }

  // Clear all history
  const clearAllHistory = () => {
    saveHistory([])
  }

  // Filter and sort history
  const filteredHistory = analysisHistory
    .filter((record) => {
      const matchesSearch =
        record.prediction.toLowerCase().includes(searchTerm.toLowerCase()) ||
        record.imageName.toLowerCase().includes(searchTerm.toLowerCase())
      const matchesSeverity = filterSeverity === "all" || record.severity === filterSeverity
      return matchesSearch && matchesSeverity
    })
    .sort((a, b) => {
      switch (sortBy) {
        case "date":
          return b.date.getTime() - a.date.getTime()
        case "confidence":
          return b.confidence - a.confidence
        case "severity":
          return a.severity.localeCompare(b.severity)
        default:
          return 0
      }
    })

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "healthy":
        return "bg-green-100 text-green-800 border-green-200"
      case "mild":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "moderate":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "severe":
        return "bg-red-100 text-red-800 border-red-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const downloadRecord = (record: AnalysisRecord) => {
    const report = `
AgriScan AI - Analysis Report
============================

Date: ${record.date.toLocaleDateString()}
Time: ${record.date.toLocaleTimeString()}
Image: ${record.imageName}
Disease: ${record.prediction}
Confidence: ${record.confidence}%
Severity: ${record.severity}
Treatment: ${record.treatment}

Generated by AgriScan AI
    `.trim()

    const blob = new Blob([report], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `analysis-${record.id}-${record.date.toISOString().split("T")[0]}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] p-0">
        <DialogHeader className="p-6 pb-0">
          <DialogTitle className="text-2xl font-bold flex items-center gap-3">
            <Calendar className="w-6 h-6 text-green-600" />
            Analysis History
          </DialogTitle>
        </DialogHeader>

        <div className="p-6 pt-4">
          {/* Search and Filter Controls */}
          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <Input
                  placeholder="Search by disease or image name..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-2">
              <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                <SelectTrigger className="w-32">
                  <Filter className="w-4 h-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severity</SelectItem>
                  <SelectItem value="healthy">Healthy</SelectItem>
                  <SelectItem value="mild">Mild</SelectItem>
                  <SelectItem value="moderate">Moderate</SelectItem>
                  <SelectItem value="severe">Severe</SelectItem>
                </SelectContent>
              </Select>
              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="date">Sort by Date</SelectItem>
                  <SelectItem value="confidence">Sort by Confidence</SelectItem>
                  <SelectItem value="severity">Sort by Severity</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* History List */}
          <ScrollArea className="h-96">
            {filteredHistory.length === 0 ? (
              <div className="text-center py-12">
                <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">No Analysis History</h3>
                <p className="text-gray-600">
                  {searchTerm || filterSeverity !== "all"
                    ? "No records match your search criteria"
                    : "Start analyzing crop images to build your history"}
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {filteredHistory.map((record, index) => (
                  <div
                    key={record.id}
                    className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <h4 className="font-semibold text-gray-900">{record.prediction}</h4>
                          <Badge className={`text-xs ${getSeverityColor(record.severity)}`}>{record.severity}</Badge>
                          <Badge variant="outline" className="text-xs">
                            {record.confidence}% confidence
                          </Badge>
                        </div>
                        <p className="text-sm text-gray-600 mb-2">
                          <strong>Image:</strong> {record.imageName}
                        </p>
                        <p className="text-sm text-gray-600 mb-2">
                          <strong>Date:</strong> {record.date.toLocaleDateString()} at{" "}
                          {record.date.toLocaleTimeString()}
                        </p>
                        <p className="text-sm text-gray-700 line-clamp-2">
                          <strong>Treatment:</strong> {record.treatment}
                        </p>
                      </div>
                      <div className="flex gap-1 ml-4">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => downloadRecord(record)}
                          className="p-2 h-8 w-8"
                        >
                          <Download className="w-3 h-3" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => deleteRecord(record.id)}
                          className="p-2 h-8 w-8 text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-3 h-3" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </ScrollArea>

          {/* Footer Actions */}
          {analysisHistory.length > 0 && (
            <>
              <Separator className="my-4" />
              <div className="flex justify-between items-center">
                <p className="text-sm text-gray-600">
                  {filteredHistory.length} of {analysisHistory.length} records
                </p>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={clearAllHistory} className="text-red-600 hover:text-red-700">
                    <Trash2 className="w-4 h-4 mr-2" />
                    Clear All
                  </Button>
                  <Button onClick={onClose}>Close</Button>
                </div>
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
